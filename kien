#include <stdio.h>
#include <stdint.h>
#include<string.h>
#pragma pack(push, 1) // exact fit - no padding
typedef struct
{
    uint8_t jmp[3];
    char oem[8];
    uint16_t bytes_per_sector;
    uint8_t sectors_per_cluster;
    uint16_t reserved_sectors;
    uint8_t number_of_fats;
    uint16_t root_dir_entries;
    uint16_t total_sectors_short; // if zero, later field is used
    uint8_t media_descriptor;
    uint16_t fat_size_sectors;
    uint16_t sectors_per_track;
    uint16_t number_of_heads;
    uint32_t hidden_sectors;
    uint32_t total_sectors_long;

    // used by FAT12 and FAT16
    uint8_t drive_number;
    uint8_t current_head;
    uint8_t boot_signature;
    uint32_t volume_id;
    char volume_label[11];
    char fs_type[8]; // typically contains "FAT12   "
} __attribute__((packed)) Fat12BootSector;


typedef struct  {
    char filename[8];
    char ext[3];
    unsigned char attributes;
    unsigned char reserved[10];
    unsigned short modify_time;
    unsigned short modify_date;
    unsigned short starting_cluster;
    unsigned int file_size;
}dir_entry;

#pragma pack(pop)
char Out[3];
int i;
int main()
{
    FILE *fp;
    Fat12BootSector bs;
    dir_entry entry;
    char root_dir[4096];

    fp = fopen("C:\\Users\\Kien\\Downloads\\floppy.img", "rb");
    if (fp == NULL)
    {
        printf("Error: could not open file.\n");
    }

    fread(&bs, sizeof(Fat12BootSector), 1, fp);
    
    //calculate address of root dir
    uint32_t root_dir_sectors = (bs.root_dir_entries * 32 + bs.bytes_per_sector - 1) / bs.bytes_per_sector;
    uint32_t root_dir_sector = bs.reserved_sectors + bs.number_of_fats * bs.fat_size_sectors;
    uint32_t root_dir_offset = root_dir_sector * bs.bytes_per_sector;
    
    
    uint32_t fat_sector = bs.reserved_sectors;
    uint32_t fat_offset = fat_sector * bs.bytes_per_sector;
	
	// number entry:
	
	fseek(fp, root_dir_offset, SEEK_SET); // di chuy?n con tr? d?c/ghi d?n d?u root directory

    // d?c các entry trong root directory
    printf("Danh sách trong root directory:\n");
    printf("--------------------------------------------------\n");
    for(i=0;i<bs.root_dir_entries;i++)
{
	// 224 = root_dir_entries;
        fread(&entry, sizeof(entry), 1, fp);
        if (entry.filename[0] == 0x00) {
            // k?t thúc root directory
            break;
        } else if (entry.filename[0] == 0xE5) {
            // entry b? xóa
            continue;
        } else {
           
            char filename[9], ext[4] ;
            memcpy(filename, entry.filename, 8);
            filename[8] = '\0';
            memcpy(ext, entry.ext, 3);
        	//printf("%x" , entry.modify_date);
            unsigned char hour, minute, second;
			hour = (entry.modify_time >> 11) & 0x1f;
			minute = (entry.modify_time >> 5) & 0x3f;
			second = (entry.modify_time & 0x1f) * 2;

			unsigned char day, month, year;
			day = entry.modify_date & 0x1f;
			month = (entry.modify_date >> 5) & 0x0f;
			year = ((entry.modify_date >>  9) & 0x7f) ;
            ext[3] = '\0';
            printf("%s.%s      %02d: %02d: %02d               %02d : %02d : %02d\n",filename,ext, day, month, year+ 1980, hour,minute,second);
        }   
}
    fclose(fp);

}
